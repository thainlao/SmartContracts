// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "erc721a/contracts/ERC721A.sol";

contract TheArt is ERC721A, Ownable {

    uint public totalTokensMinted;
    uint256 constant MAX_TOKENS = 5555;
    uint256 constant MAX_MINTS_PER_USER = 5;
    uint256 constant TOKEN_PRICE = 1 ether;
    
    string public baseExtenstion = ".json";
    string internal baseTokenUri;

    bool public publicMintOpen = false;
   
    constructor() ERC721A("The Art", "ART") {}

    function setBaseTokenUri(string calldata baseTokenUri_) external onlyOwner {
      baseTokenUri = baseTokenUri_;
  }

    receive() external payable {}

    function _startTokenId() internal view override virtual returns (uint256) {
        return 1;
    }

  function tokenURI(uint256 tokenId_) public view override returns (string memory) {
      require(_exists(tokenId_), "Token does not exist");
      return string(abi.encodePacked(baseTokenUri, Strings.toString(tokenId_), ".json"));
  }


   function editMint(
        bool _publicMintOpen
    ) external onlyOwner {
        publicMintOpen = _publicMintOpen;
    }

    function mintOwner(uint256 quantity) public onlyOwner{
        require(totalSupply() + quantity <= MAX_TOKENS, "SOLD OUT!");
        _safeMint(msg.sender, quantity);
        totalTokensMinted += quantity;
    }

    function withdraw(address _addr) external onlyOwner {
        
        uint256 balance = address(this).balance; 
        payable(_addr).transfer(balance);
    }

    function Freemint(uint256 quantity) public payable {
    require(totalSupply() + quantity <= MAX_TOKENS, "Maximum number of tokens minted");
    require(quantity + _numberMinted(msg.sender) <= MAX_MINTS_PER_USER, "Invalid quantity");

    if (balanceOf(msg.sender) == 0) {
        // Mint the first token for free
        _safeMint(msg.sender, quantity);
        totalTokensMinted += quantity;
        quantity--;
    }

    if (quantity > 0) {
        // Calculate the cost
        uint256 cost = quantity * TOKEN_PRICE;
        require(msg.value >= cost, "Insufficient funds");
            _safeMint(msg.sender, quantity);
            totalTokensMinted += quantity;
    }
}

//4000000 gwei

    function getTotalTokensMinted() public view returns (uint256) {
    return totalTokensMinted;
}
}
